# -*- coding: utf-8 -*-
"""gradio moblieNet

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zInEAGPoKgnS9tBWywmZpVT7arXyBGJ7
"""

import os
os.environ['KAGGLE_USERNAME'] = "wongsaphatpho" # username from the json file
os.environ['KAGGLE_KEY'] = "b3d8d86ecda1038e7d81dcb2f96c21b7" # key from the json file

!kaggle datasets download -d wongsaphatpho/data-fossil

# Unzip training data
from zipfile import ZipFile
file_name = "/content/data-fossil.zip"
with ZipFile(file_name, 'r') as zip:
  zip.extractall()
  print('done')

'/content/data_fossil/train/crinoid'
'/content/data_fossil/train/fusulinid'
'/content/data_fossil/test/crinoid'
'/content/data_fossil/test/fusulinid'

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNet
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

# กำหนดพาธข้อมูล
train_dir = '/content/data_fossil/train'
val_dir = '/content/data_fossil/test'

# ใช้ ImageDataGenerator สำหรับการโหลดข้อมูลและการประมวลผลภาพ
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

val_datagen = ImageDataGenerator(rescale=1./255)

# โหลดข้อมูลจากโฟลเดอร์
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical')

val_generator = val_datagen.flow_from_directory(
    val_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical')

# โหลดโมเดล MobileNet โดยไม่เอาชั้นสุดท้าย (include_top=False)
base_model = MobileNet(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# เพิ่มชั้นใหม่สำหรับการจำแนกประเภทฟอสซิล
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)  # เพิ่มชั้น fully-connected
predictions = Dense(2, activation='softmax')(x)  # 2 คลาส

# สร้างโมเดลใหม่
model = Model(inputs=base_model.input, outputs=predictions)

# ล็อคชั้นของ MobileNet ไม่ให้ฝึกใหม่ (trainable = False)
for layer in base_model.layers:
    layer.trainable = False

# คอมไพล์โมเดล
# คอมไพล์โมเดล
model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])


# ฝึกโมเดล
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=val_generator)

# ปลดล็อคบางชั้นของ MobileNet เพื่อลงรายละเอียดเพิ่ม
for layer in base_model.layers[:100]:
    layer.trainable = False
for layer in base_model.layers[100:]:
    layer.trainable = True

# คอมไพล์โมเดลใหม่
model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])


# ฝึกโมเดลอีกครั้ง
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=val_generator)

def classify_image(img):
    img_resized = tf.image.resize(img, (224, 224))
    img_array = np.array(img_resized) / 255.0  # normalize image
    img_array = np.expand_dims(img_array, axis=0)  # เพิ่มมิติ batch

    predictions = model.predict(img_array)
    predicted_class = np.argmax(predictions, axis=1)

    class_names = ["crinoid", "fusulinid"]
    return class_names[predicted_class[0]]

from tensorflow.keras.applications import MobileNet
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# โหลด MobileNet โดยไม่รวมเลเยอร์บนสุด
base_model = MobileNet(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

!pip install gradio

import gradio as gr
import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import MobileNet
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.applications.mobilenet import preprocess_input
from PIL import Image

# กำหนดจำนวนคลาส
num_classes = 2

# โหลด MobileNet แต่ไม่เอาชั้นบนสุด (include_top=False)
base_model = MobileNet(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# เพิ่มชั้นใหม่เพื่อรองรับ 2 คลาส
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
predictions = Dense(num_classes, activation='softmax')(x)

# สร้างโมเดลใหม่
model = Model(inputs=base_model.input, outputs=predictions)

# ล็อคชั้นของ MobileNet ไว้ (ไม่ต้องฝึกใหม่)
for layer in base_model.layers:
    layer.trainable = False

# คอมไพล์โมเดล
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# ฟังก์ชันสำหรับทำนายภาพ
def classify_image(img):
    try:
        # ปรับขนาดภาพให้เป็น 224x224
        img_resized = tf.image.resize(img, (224, 224))

        # แปลงเป็น numpy array และ preprocess
        img_array = np.array(img_resized)
        img_array = preprocess_input(img_array)
        img_array = np.expand_dims(img_array, axis=0)  # เพิ่มมิติ batch

        # ทำนายผล
        predictions = model.predict(img_array)
        predicted_class = np.argmax(predictions, axis=1)

        # แสดงผลลัพธ์คลาสที่ทำนาย
        class_names = ["Crinoid", "Fusulinid"]  # กำหนดชื่อคลาสของคุณเอง
        return class_names[predicted_class[0]]
    except Exception as e:
        return f"Error: {str(e)}"

# สร้างอินเทอร์เฟซ Gradio
interface = gr.Interface(
    fn=classify_image,
    inputs=gr.Image(type="numpy"),
    outputs="text",
    title="ตัวจำแนกประเภทภาพฟอสซิล ",
    description="อัปโหลดภาพของฟอสซิลเพื่อจำแนกประเภท",
    live=True  # เพิ่มการอัปเดตแบบเรียลไทม์
)

# เปิดใช้งานอินเทอร์เฟซ
interface.launch(debug=True)